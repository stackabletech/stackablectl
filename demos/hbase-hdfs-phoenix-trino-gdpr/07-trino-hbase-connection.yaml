---
apiVersion: batch/v1
kind: Job
metadata:
  name: create-shopping-events-in-trino
spec:
  template:
    spec:
      containers:
        - name: create-shopping-events-in-trino
          image: docker.stackable.tech/stackable/testing-tools:0.1.0-stackable0.1.0
          command: ["bash", "-c", "python -u /tmp/script/script.py"]
          volumeMounts:
            - name: script
              mountPath: /tmp/script
      volumes:
        - name: script
          configMap:
            name: create-shopping-events-in-trino-script
      restartPolicy: OnFailure
  backoffLimit: 50
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: create-shopping-events-in-trino-script
data:
  script.py: |
    import sys
    import trino

    if not sys.warnoptions:
        import warnings
    warnings.simplefilter("ignore")

    def get_connection():
        connection = trino.dbapi.connect(
            host="trino-coordinator",
            port=8443,
            user="demo",
            http_scheme='https',
            auth=trino.auth.BasicAuthentication("demo", "demo"),
        )
        connection._http_session.verify = False
        return connection

    def run_query(connection, query):
        print(f"[DEBUG] Executing query {query}")
        cursor = connection.cursor()
        cursor.execute(query)
        return cursor.fetchall()

    connection = get_connection()

    assert run_query(connection, "CREATE SCHEMA IF NOT EXISTS hive.demo WITH (location = 's3a://demo-bucket/')")[0][0] is True
    assert run_query(connection, """
        CREATE TABLE IF NOT EXISTS hive.demo.category_tree (
            categoryid INT,
            parentid DOUBLE
        ) WITH (
            external_location = 's3a://demo-bucket/category_tree/',
            format = 'parquet'
        )
    """)[0][0] is True

    loaded_rows = run_query(connection, "SELECT COUNT(*) FROM hive.demo.category_tree")[0][0]
    print(f"Loaded {loaded_rows} rows")
    assert loaded_rows > 0

    print("Analyzing table category_tree")
    analyze_rows = run_query(connection, """ANALYZE hive.demo.category_tree""")[0][0]
    assert analyze_rows == loaded_rows
    stats = run_query(connection, """show stats for hive.demo.category_tree""")
    print("Produced the following stats:")
    print(*stats, sep="\n")
    
    assert run_query(connection, """
        CREATE TABLE IF NOT EXISTS hive.demo.item_properties (
            timestamp TIMESTAMP,
            itemid BIGINT,
            property VARCHAR(200),
            value VARCHAR(200)
        ) WITH (
            external_location = 's3a://demo-bucket/item_properties/',
            format = 'parquet'
        )
    """)[0][0] is True

    loaded_rows = run_query(connection, "SELECT COUNT(*) FROM hive.demo.item_properties")[0][0]
    print(f"Loaded {loaded_rows} rows")
    assert loaded_rows > 0

    print("Analyzing table item_properties")
    analyze_rows = run_query(connection, """ANALYZE hive.demo.item_properties""")[0][0]
    assert analyze_rows == loaded_rows
    stats = run_query(connection, """show stats for hive.demo.item_properties""")
    print("Produced the following stats:")
    print(*stats, sep="\n")
