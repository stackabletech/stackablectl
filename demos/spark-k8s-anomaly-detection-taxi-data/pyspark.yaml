---
apiVersion: spark.stackable.tech/v1alpha1
kind: SparkApplication
metadata:
  name: resources-sparkconf
spec:
  version: "1.0"
  sparkImage: docker.stackable.tech/stackable/pyspark-k8s:3.3.0-stackable0.2.0
  mode: cluster
  mainApplicationFile: local:///stackable/spark/examples/src/main/python/streaming/hdfs_wordcount.py
  args:
    - "/tmp2"
  sparkConf:
    spark.kubernetes.submission.waitAppCompletion: "false"
    spark.kubernetes.driver.pod.name: "resources-sparkconf-driver"
    spark.kubernetes.executor.podNamePrefix: "resources-sparkconf"
    spark.kubernetes.driver.request.cores: "2"
    spark.kubernetes.driver.limit.cores: "3"
    spark.driver.cores: "3"
    spark.driver.memory: "1g"
    spark.driver.memoryOverheadFactor: "0.4"
    spark.kubernetes.executor.request.cores: "2"
    spark.kubernetes.executor.limit.cores: "3"
    spark.executor.cores: "3"
    spark.executor.memory: "2g"
    spark.executor.memoryOverheadFactor: "0.4"
    spark.executor.instances: "1"
    #spark.hadoop.fs.s3a.aws.credentials.provider: "org.apache.hadoop.fs.s3a.SimpleAWSCredentialsProvider"
    spark.hadoop.fs.s3a.aws.credentials.provider: "org.apache.hadoop.fs.s3a.AnonymousAWSCredentialsProvider"
    spark.hadoop.fs.s3a.endpoint: "http://minio-trino:9000"
    #spark.hadoop.fs.s3a.secret.key: "demodemo"
    #spark.hadoop.fs.s3a.access.key: "demo"
    spark.hadoop.fs.s3a.path.style.access: "true"
#  s3bucket:
#    inline:
#      bucketName: demo
#      connection:
#        inline:
#          host: minio-trino
#          port: 9000
#          accessStyle: Path
#          credentials:
#            secretClass: s3-credentials-class
#---
#apiVersion: v1
#kind: Secret
#metadata:
#  name: minio-credentials
#  labels:
#    secrets.stackable.tech/class: s3-credentials-class
#stringData:
#  accessKeyId: demo
#  secretAccessKey: demodemo
#---
#apiVersion: secrets.stackable.tech/v1alpha1
#kind: SecretClass
#metadata:
#  name: s3-credentials-class
#spec:
#  backend:
#    k8sSearch:
#      searchNamespace:
#        pod: {}
