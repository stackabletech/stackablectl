---
apiVersion: batch/v1
kind: Job
metadata:
  name: create-tables-in-trino
spec:
  template:
    spec:
      serviceAccountName: demo-serviceaccount
      initContainers:
        - name: wait-for-testdata
          image: docker.stackable.tech/stackable/tools:1.0.0-stackable23.4
          command: ["bash", "-c", "echo 'Waiting for job load-test-data to finish' && kubectl wait --for=condition=complete --timeout=30m job/load-test-data"]
      containers:
        - name: create-tables-in-trino
          image: docker.stackable.tech/stackable/testing-tools:0.1.0-stackable0.1.0
          command: ["bash", "-c", "python -u /tmp/script/script.py"]
          volumeMounts:
            - name: script
              mountPath: /tmp/script
            - name: trino-users
              mountPath: /trino-users
      volumes:
        - name: script
          configMap:
            name: create-tables-in-trino-script
        - name: trino-users
          secret:
            secretName: trino-users
      restartPolicy: OnFailure
  backoffLimit: 50
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: create-tables-in-trino-script
data:
  script.py: |
    import sys
    import trino

    if not sys.warnoptions:
        import warnings
    warnings.simplefilter("ignore")

    def get_connection():
        connection = trino.dbapi.connect(
            host="trino-coordinator",
            port=8443,
            user="admin",
            http_scheme='https',
            auth=trino.auth.BasicAuthentication("admin", open("/trino-users/admin").read()),
        )
        connection._http_session.verify = False
        return connection

    def run_query(connection, query):
        print(f"[DEBUG] Executing query {query}")
        cursor = connection.cursor()
        cursor.execute(query)
        return cursor.fetchall()

    def run_query_and_assert_more_than_one_row(connection, query):
        rows = run_query(connection, query)[0][0]
        assert rows > 0

    connection = get_connection()

    run_query(connection, "CREATE SCHEMA IF NOT EXISTS staging.house_sales WITH (location = 's3a://staging/house-sales/')")
    run_query(connection, "CREATE SCHEMA IF NOT EXISTS staging.earthquakes WITH (location = 's3a://staging/earthquakes/')")
    run_query(connection, "CREATE SCHEMA IF NOT EXISTS staging.smart_city WITH (location = 's3a://staging/smart-city/')")
    run_query(connection, "CREATE SCHEMA IF NOT EXISTS staging.taxi WITH (location = 's3a://staging/taxi/')")
    run_query(connection, "CREATE SCHEMA IF NOT EXISTS lakehouse.house_sales WITH (location = 's3a://lakehouse/house-sales/')")
    run_query(connection, "CREATE SCHEMA IF NOT EXISTS lakehouse.earthquakes WITH (location = 's3a://lakehouse/earthquakes/')")
    run_query(connection, "CREATE SCHEMA IF NOT EXISTS lakehouse.smart_city WITH (location = 's3a://lakehouse/smart-city/')")
    run_query(connection, "CREATE SCHEMA IF NOT EXISTS lakehouse.taxi WITH (location = 's3a://lakehouse/taxi/')")

    run_query(connection, """
        CREATE TABLE IF NOT EXISTS staging.house_sales.house_sales (
        transaction_id varchar,
            price varchar,
            date_of_transfer varchar,
            postcode varchar,
            property_type varchar,
            new_build varchar,
            tenure varchar,
            paon varchar,
            saon varchar,
            street varchar,
            locality varchar,
            city varchar,
            district varchar,
            county varchar,
            ppd_category varchar,
            record_status varchar
        )
        WITH (
            external_location = 's3a://staging/house-sales/house-sales/',
            format = 'csv',
            csv_escape = '\\',
            csv_quote = '"',
            csv_separator = ','
        )
    """)

    run_query(connection, """
        CREATE TABLE IF NOT EXISTS staging.house_sales.postcode_geo_lookup (
            postcode varchar,
            status varchar,
            usertype varchar,
            easting varchar,
            northing varchar,
            positional_quality_indicator varchar,
            country varchar,
            latitude varchar,
            longitude varchar,
            postcode_no_space varchar,
            postcode_fixed_width_seven varchar,
            postcode_fixed_width_eight varchar,
            postcode_area varchar,
            postcode_district varchar,
            postcode_sector varchar,
            outcode varchar,
            incode varchar
        )
        WITH (
            external_location = 's3a://staging/house-sales/postcode-geo-lookup/',
            format = 'csv',
            csv_escape = '\\',
            csv_quote = '"',
            csv_separator = ','
        )
    """)

    run_query(connection, """
        CREATE TABLE IF NOT EXISTS staging.earthquakes.earthquakes (
          timestamp varchar,
            latitude varchar,
            longitude varchar,
            depth varchar,
            mag varchar,
            mag_type varchar,
            nst varchar,
            gap varchar,
            dmin varchar,
            rms varchar,
            net varchar,
            id varchar,
            updated varchar,
            place varchar,
            type varchar,
            horizontal_error varchar,
            depth_error varchar,
            mag_error varchar,
            mag_nst varchar,
            status varchar,
            location_source varchar,
            mag_source varchar
        )
        WITH (
            external_location = 's3a://staging/earthquakes/earthquakes/',
            format = 'csv',
            csv_escape = '\\',
            csv_quote = '"',
            csv_separator = ',',
            skip_header_line_count = 1
        )
    """)

    run_query(connection, """
        CREATE TABLE IF NOT EXISTS staging.smart_city.e_charging_stations (
          operator varchar,
          street varchar,
          street_number varchar,
          address_supplement varchar,
          zip_code varchar,
          city varchar,
          state varchar,
          state_iso_3166_2 varchar,
          district varchar,
          latitude varchar,
          longitude varchar,
          date_of_installation varchar,
          power varchar,
          speed_type varchar,
          number_of_charging_ports varchar,
          port_1_types varchar,
          port_1_power varchar,
          port_1_pubkey varchar,
          port_2_types varchar,
          port_2_power varchar,
          port_2_pubkey varchar,
          port_3_types varchar,
          port_3_power varchar,
          port_3_pubkey varchar,
          port_4_types varchar,
          port_4_power varchar,
          port_4_pubkey varchar
        )
        WITH (
            external_location = 's3a://staging/smart-city/e-charging-stations/',
            format = 'csv',
            csv_escape = '\\',
            csv_quote = '"',
            csv_separator = ',',
            skip_header_line_count = 1
        )
    """)

    run_query(connection, """
        CREATE TABLE IF NOT EXISTS staging.taxi.taxi_zone_lookup (
            location_id VARCHAR,
            borough VARCHAR,
            zone VARCHAR,
            service_zone VARCHAR
        ) WITH (
            external_location = 's3a://staging/taxi/taxi-zone-lookup/',
            format = 'csv',
            csv_escape = '\\',
            csv_quote = '"',
            csv_separator = ',',
            skip_header_line_count = 1
        )
    """)

    run_query(connection, """
        CREATE TABLE IF NOT EXISTS staging.taxi.payment_type_lookup (
            payment_type_id VARCHAR,
            payment_type VARCHAR
        ) WITH (
            external_location = 's3a://staging/taxi/payment-type-lookup/',
            format = 'csv',
            csv_escape = '\\',
            csv_quote = '"',
            csv_separator = ',',
            skip_header_line_count = 1
        )
    """)

    run_query(connection, """
        CREATE TABLE IF NOT EXISTS staging.taxi.rate_code_lookup (
            rate_code_id VARCHAR,
            rate_code VARCHAR
        ) WITH (
            external_location = 's3a://staging/taxi/rate-code-lookup/',
            format = 'csv',
            csv_escape = '\\',
            csv_quote = '"',
            csv_separator = ',',
            skip_header_line_count = 1
        )
    """)

    run_query(connection, """
        CREATE TABLE IF NOT EXISTS staging.taxi.yellow_tripdata (
            VendorID BIGINT,
            tpep_pickup_datetime TIMESTAMP,
            tpep_dropoff_datetime TIMESTAMP,
            passenger_count DOUBLE,
            trip_distance DOUBLE,
            RatecodeID DOUBLE,
            store_and_fwd_flag VARCHAR,
            PULocationID BIGINT,
            DOLocationID BIGINT,
            payment_type BIGINT,
            fare_amount DOUBLE,
            extra DOUBLE,
            mta_tax DOUBLE,
            tip_amount DOUBLE,
            tolls_amount DOUBLE,
            improvement_surcharge DOUBLE,
            total_amount DOUBLE,
            congestion_surcharge DOUBLE,
            airport_fee DOUBLE
        ) WITH (
            external_location = 's3a://staging/taxi/yellow-tripdata/',
            format = 'parquet'
        )
    """)

    run_query(connection, """
        CREATE TABLE IF NOT EXISTS staging.taxi.green_tripdata (
            VendorID BIGINT,
            lpep_pickup_datetime TIMESTAMP,
            lpep_dropoff_datetime TIMESTAMP,
            store_and_fwd_flag VARCHAR,
            RatecodeID DOUBLE,
            PULocationID BIGINT,
            DOLocationID BIGINT,
            passenger_count DOUBLE,
            trip_distance DOUBLE,
            fare_amount DOUBLE,
            extra DOUBLE,
            mta_tax DOUBLE,
            tip_amount DOUBLE,
            tolls_amount DOUBLE,
            ehail_fee INTEGER,
            improvement_surcharge DOUBLE,
            total_amount DOUBLE,
            payment_type DOUBLE,
            trip_type DOUBLE,
            congestion_surcharge DOUBLE
        ) WITH (
            external_location = 's3a://staging/taxi/green-tripdata/',
            format = 'parquet'
        )
    """)

    run_query(connection, """
        CREATE TABLE IF NOT EXISTS staging.taxi.fhvhv_tripdata (
            hvfhs_license_num VARCHAR,
            dispatching_base_num VARCHAR,
            originating_base_num VARCHAR,
            request_datetime TIMESTAMP,
            on_scene_datetime TIMESTAMP,
            pickup_datetime TIMESTAMP,
            dropoff_datetime TIMESTAMP,
            PULocationID BIGINT,
            DOLocationID BIGINT,
            trip_miles DOUBLE,
            trip_time BIGINT,
            base_passenger_fare DOUBLE,
            tolls DOUBLE,
            bcf DOUBLE,
            sales_tax DOUBLE,
            congestion_surcharge DOUBLE,
            airport_fee DOUBLE,
            tips DOUBLE,
            driver_pay DOUBLE,
            shared_request_flag VARCHAR,
            shared_match_flag VARCHAR,
            access_a_ride_flag VARCHAR,
            wav_request_flag VARCHAR,
            wav_match_flag VARCHAR
        ) WITH (
            external_location = 's3a://staging/taxi/fhvhv-tripdata/',
            format = 'parquet'
        )
    """)
























    run_query(connection, """
        create table if not exists lakehouse.house_sales.house_sales with (
            partitioning = ARRAY['year(date_of_transfer)']
        ) as
        select
            trim(leading '{' FROM trim(trailing '}' FROM transaction_id)) as transaction_id,
            cast(price as bigint) as price,
            cast(date_parse(date_of_transfer, '%Y-%m-%d %H:%i') as date) as date_of_transfer,
            s.postcode,
            property_type,
            case new_build when 'Y' then true else false end as new_build,
            tenure,
            paon,
            street,
            locality,
            city,
            district,
            county,
            ppd_category,
            record_status,
            l.status,
            l.usertype,
            l.country,
            l.postcode_no_space,
            cast(l.easting as bigint) as easting,
            cast(l.northing as bigint) as northing,
            cast(l.longitude as double) as longitude,
            cast(l.latitude as double) as latitude
        from staging.house_sales.house_sales as s
        left join staging.house_sales.postcode_geo_lookup as l on s.postcode = l.postcode
    """)

    run_query(connection, """
      create table if not exists lakehouse.earthquakes.earthquakes as
        select
            cast(date_parse(timestamp, '%Y-%m-%dT%H:%i:%s.%fZ') as timestamp(6)) as timestamp,
            cast(latitude as double) as latitude,
            cast(longitude as double) as longitude,
            try_cast(depth as double) as depth,
            cast(mag as double) as mag,
            mag_type,
            try_cast(nst as bigint) as nst,
            try_cast(gap as double) as gap,
            try_cast(dmin as double) as dmin,
            try_cast(rms as double) as rms,
            net,
            id,
            cast(date_parse(updated, '%Y-%m-%dT%H:%i:%s.%fZ') as timestamp(6)) as updated,
            place,
            type,
            try_cast(horizontal_error as double) as horizontal_error,
            try_cast(depth_error as double) as depth_error,
            try_cast(mag_error as double) as mag_error,
            try_cast(mag_nst as double) as mag_nst,
            status,
            location_source,
            mag_source
        from staging.earthquakes.earthquakes
        where length(timestamp) = 24
    """)

    run_query(connection, """
        create table if not exists lakehouse.smart_city.e_charging_stations as
        select
          operator,
          street,
          street_number,
          address_supplement,
          zip_code,
          city,
          state,
          state_iso_3166_2,
          district,
          try_cast(replace(latitude, ',', '.') as double) as latitude,
          try_cast(replace(longitude, ',', '.') as double) as longitude,
          cast(date_parse(date_of_installation, '%Y/%m/%d') as date) as date_of_installation,
          cast(replace(power, ',', '.') as double) as power,
          speed_type,
          cast(number_of_charging_ports as bigint) as number_of_charging_ports,
          port_1_types,
          try_cast(replace(port_1_power, ',', '.') as double) as port_1_power,
          port_1_pubkey,
          port_2_types,
          try_cast(replace(port_2_power, ',', '.') as double) as port_2_power,
          port_2_pubkey,
          port_3_types,
          try_cast(replace(port_3_power, ',', '.') as double) as port_3_power,
          port_3_pubkey,
          port_4_types,
          try_cast(replace(port_4_power, ',', '.') as double) as port_4_power,
          port_4_pubkey
      from staging.smart_city.e_charging_stations
    """)

    # We need to let Trino recognize the lookup tables are small so that is uses a replicated and not a partitioned join
    run_query(connection, """
    analyze staging.taxi.payment_type_lookup
    """)

    run_query(connection, """
    analyze staging.taxi.rate_code_lookup
    """)

    run_query(connection, """
    analyze staging.taxi.taxi_zone_lookup
    """)

    run_query(connection, """
        create table if not exists lakehouse.taxi.yellow_tripdata with (
            partitioning = ARRAY['month(tpep_pickup_datetime)']
        )
        as select
            VendorID as vendor_id,
            cast(tpep_pickup_datetime as timestamp(6)) as tpep_pickup_datetime,
            cast(tpep_dropoff_datetime as timestamp(6)) as tpep_dropoff_datetime,
            cast(passenger_count as BIGINT) as passenger_count,
            trip_distance,
            r.rate_code,
            store_and_fwd_flag,
            z_pickup.borough as pickup_borough,
            z_pickup.zone as pickup_zone,
            z_pickup.service_zone as pickup_service_zone,
            z_dropoff.borough as dropoff_borough,
            z_dropoff.zone as dropoff_zone,
            z_dropoff.service_zone as dropoff_service_zone,
            p.payment_type as payment_type,
            fare_amount,
            extra,
            mta_tax,
            tip_amount,
            tolls_amount,
            improvement_surcharge,
            total_amount,
            congestion_surcharge,
            airport_fee
        from staging.taxi.yellow_tripdata as t
        left join staging.taxi.taxi_zone_lookup as z_pickup on t.pulocationid = cast(z_pickup.location_id as bigint)
        left join staging.taxi.taxi_zone_lookup as z_dropoff on t.dolocationid = cast(z_dropoff.location_id as bigint)
        left join staging.taxi.payment_type_lookup as p on t.payment_type = cast(p.payment_type_id as bigint)
        left join staging.taxi.rate_code_lookup as r on t.ratecodeid = cast(r.rate_code_id as bigint)
        where tpep_pickup_datetime >= date '2015-01-01' and tpep_pickup_datetime <= now() -- We have to remove some invalid records
    """)


















    run_query(connection, """
      create or replace materialized view lakehouse.taxi.yellow_tripdata_daily_agg as
      select
            date_trunc('day', tpep_pickup_datetime) as day,
            pickup_borough,
            pickup_zone,
            dropoff_borough,
            dropoff_zone,
            payment_type,
            count(*) as trips,
            avg(total_amount) as avg_total_amount,
            sum(total_amount) as sum_total_amount,
            avg(airport_fee) as avg_airport_fee,
            sum(airport_fee) as sum_airport_fee,
            avg(trip_distance) as avg_trip_distance,
            sum(trip_distance) as sum_trip_distance
        from lakehouse.taxi.yellow_tripdata
        group by 1, 2, 3, 4, 5, 6
    """)

    run_query(connection, """
      create or replace materialized view lakehouse.taxi.yellow_tripdata_monthly_agg as
      select
            date_trunc('month', day) as month,
            pickup_borough,
            pickup_zone,
            dropoff_borough,
            dropoff_zone,
            payment_type,
            sum(trips) as trips,
            sum(sum_total_amount) as sum_total_amount,
            sum(sum_airport_fee) as sum_airport_fee,
            sum(sum_trip_distance) as sum_trip_distance
        from lakehouse.taxi.yellow_tripdata_daily_agg
        group by 1, 2, 3, 4, 5, 6
    """)

    run_query(connection, """
        REFRESH MATERIALIZED VIEW lakehouse.taxi.yellow_tripdata_daily_agg
    """)

    run_query(connection, """
        REFRESH MATERIALIZED VIEW lakehouse.taxi.yellow_tripdata_monthly_agg
    """)






    # At this point Spark should have created the needed underlying tables
    # Ideally in the future Iceberg would allow Spark and Trino to share views, in that case Spark can create the views instead of Trino
    run_query(connection, """
        create or replace view lakehouse.smart_city.shared_bikes_station_status_latest as
        select * from lakehouse.smart_city.shared_bikes_station_status
        where (station_id, last_reported) in (select station_id, max(last_reported) from lakehouse.smart_city.shared_bikes_station_status group by station_id)
    """)

    run_query(connection, """
        create or replace view lakehouse.smart_city.shared_bikes_station_status_joined as
        select i.name, s.*, i.latitude, i.longitude from lakehouse.smart_city.shared_bikes_station_status as s
        left join lakehouse.smart_city.shared_bikes_station_information as i on s.station_id = i.station_id
    """)

    run_query(connection, """
        create or replace view lakehouse.smart_city.shared_bikes_station_status_latest_joined as
        select i.name, s.*, i.latitude, i.longitude from lakehouse.smart_city.shared_bikes_station_status_latest as s
        left join lakehouse.smart_city.shared_bikes_station_information as i on s.station_id = i.station_id
    """)

    run_query(connection, """
        create or replace view lakehouse.water_levels.measurements_joined as
        select s.short_name, m.*, s.number, s.long_name, s.km, s.agency, s.latitude, s.longitude, s.water_short_name, s.water_long_name
        from lakehouse.water_levels.measurements as m left join lakehouse.water_levels.stations as s on m.station_uuid = s.station_uuid
    """)
