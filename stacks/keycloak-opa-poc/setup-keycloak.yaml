apiVersion: v1
kind: Secret
metadata:
  name: keycloak-clients
stringData:
  superset: "{{ keycloakSupersetClientSecret }}"
  trino: "{{ keycloakTrinoClientSecret }}"
  druid: "{{ keycloakDruidClientSecret }}"
  # FIXME: They don't belong here
  # druidCookiePassphrase: "{{ keycloakDruidCookiePassphrase }}"
  # druidSystemUserPassword: "{{ druidSystemUserPassword }}"
---
apiVersion: v1
kind: Secret
metadata:
  name: keycloak-users
stringData:
  alice: "{{ alicePassword }}"
  bob: "{{ bobPassword }}"
---
apiVersion: batch/v1
kind: Job
metadata:
  name: setup-keycloak
spec:
  template:
    spec:
      containers:
      - name: setup-keycloak
        image: docker.stackable.tech/stackable/testing-tools:0.2.0-stackable0.0.0-dev # We need 0.0.0-dev, so we get kubectl
        env:
          - name: KEYCLOAK_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                name: keycloak-admin-credentials
                key: admin
          - name: ALICE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: keycloak-users
                key: alice
          - name: BOB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: keycloak-users
                key: bob
          - name: SUPERSET_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: keycloak-clients
                key: superset
          - name: TRINO_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: keycloak-clients
                key: trino
          - name: DRUID_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: keycloak-clients
                key: druid
        command:
          - bash
          - -x
          - -euo
          - pipefail
          - -c
          - |
            echo "Download keycloak"
            curl -LO https://github.com/keycloak/keycloak/releases/download/22.0.3/keycloak-22.0.3.zip
            unzip keycloak-22.0.3.zip
            cd keycloak-22.0.3/bin
            COMMON_FLAGS="--config kcadm.conf --truststore /tls/truststore.p12 --trustpass changeit"
            ./kcadm.sh config credentials $COMMON_FLAGS --server https://keycloak.default.svc.cluster.local:8443 --realm master --user admin --password "$KEYCLOAK_ADMIN_PASSWORD"
            ./kcadm.sh create users $COMMON_FLAGS -s username=alice -s firstName=Alice -s lastName=Adams -s email=alice@mycorp.org -s enabled=true || true
            ./kcadm.sh create users $COMMON_FLAGS -s username=bob   -s firstName=Bob   -s lastName=Bush  -s email=bob@mycorp.org   -s enabled=true || true
            ./kcadm.sh set-password $COMMON_FLAGS --username alice --new-password "$ALICE_PASSWORD"
            ./kcadm.sh set-password $COMMON_FLAGS --username bob   --new-password "$BOB_PASSWORD"
            ./kcadm.sh create clients $COMMON_FLAGS -f - << EOF || true
            {
              "clientId": "trino",
              "enabled": true,
              "protocol": "openid-connect",
              "clientAuthenticatorType": "client-secret",
              "secret": "$TRINO_CLIENT_SECRET",
              "redirectUris": [
                "*"
              ],
              "webOrigins": [
                "*"
              ],
              "standardFlowEnabled": true,
              "protocolMappers": [
                {
                  "name": "username",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-attribute-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "username",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "sub",
                    "jsonType.label": "String"
                  }
                }
              ]
            }
            EOF
            ./kcadm.sh create clients $COMMON_FLAGS -f - << EOF || true
            {
              "clientId": "superset",
              "enabled": true,
              "protocol": "openid-connect",
              "clientAuthenticatorType": "client-secret",
              "secret": "$SUPERSET_CLIENT_SECRET",
              "redirectUris": [
                "*"
              ],
              "webOrigins": [
                "*"
              ],
              "standardFlowEnabled": true,
              "protocolMappers": [
                {
                  "name": "username",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-attribute-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "username",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "sub",
                    "jsonType.label": "String"
                  }
                }
              ]
            }
            EOF
            ./kcadm.sh create clients $COMMON_FLAGS -f - << EOF || true
            {
              "clientId": "druid",
              "enabled": true,
              "protocol": "openid-connect",
              "clientAuthenticatorType": "client-secret",
              "secret": "$DRUID_CLIENT_SECRET",
              "redirectUris": [
                "*"
              ],
              "webOrigins": [
                "*"
              ],
              "standardFlowEnabled": true,
              "protocolMappers": [
                {
                  "name": "username",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-attribute-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "username",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "sub",
                    "jsonType.label": "String"
                  }
                }
              ]
            }
            EOF
        volumeMounts:
          - name: tls
            mountPath: /tls
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsUser: 1000
      volumes:
        - name: tls
          ephemeral:
            volumeClaimTemplate:
              metadata:
                annotations:
                  secrets.stackable.tech/class: tls
                  secrets.stackable.tech/format: tls-pkcs12
                  secrets.stackable.tech/format.compatibility.tls-pkcs12.password: changeit
                  secrets.stackable.tech/scope: pod
              spec:
                storageClassName: secrets.stackable.tech
                accessModes:
                  - ReadWriteOnce
                resources:
                  requests:
                    storage: "1"
      restartPolicy: OnFailure
  backoffLimit: 20 # give some time for the Keycloak to be available
