apiVersion: v1
kind: Secret
metadata:
  name: keycloak-clients
stringData:
  userinfoFetcher: "{{ keycloakUserinfoFetcherClientSecret }}"
  superset: "{{ keycloakSupersetClientSecret }}"
  trino: "{{ keycloakTrinoClientSecret }}"
  druid: "{{ keycloakDruidClientSecret }}"
---
apiVersion: v1
kind: Secret
metadata:
  name: keycloak-users
stringData:
  alice: "{{ alicePassword }}"
  bob: "{{ bobPassword }}"
  jane: "{{ janePassword }}"
  mike: "{{ mikePassword }}"
---
apiVersion: batch/v1
kind: Job
metadata:
  name: setup-keycloak
spec:
  template:
    spec:
      containers:
      - name: setup-keycloak
        image: docker.stackable.tech/stackable/testing-tools:0.2.0-stackable0.0.0-dev # We need 0.0.0-dev, so we get kubectl
        env:
          - name: KEYCLOAK_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                name: keycloak-admin-credentials
                key: admin
          - name: ALICE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: keycloak-users
                key: alice
          - name: BOB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: keycloak-users
                key: bob
          - name: JANE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: keycloak-users
                key: jane
          - name: MIKE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: keycloak-users
                key: mike
          - name: USERINFO_FETCHER_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: keycloak-clients
                key: userinfoFetcher
          - name: SUPERSET_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: keycloak-clients
                key: superset
          - name: TRINO_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: keycloak-clients
                key: trino
          - name: DRUID_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: keycloak-clients
                key: druid
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
        command:
          - bash
          - -x
          - -euo
          - pipefail
          - -c
          - |
            COMMON_FLAGS="--config kcadm.conf --truststore /tls/truststore.p12 --trustpass changeit"

            echo "Configuring credentials"
            kcadm.sh config credentials $COMMON_FLAGS --server https://keycloak.$NAMESPACE.svc.cluster.local:8443 --realm master --user admin --password "$KEYCLOAK_ADMIN_PASSWORD"

            echo "Adding users"
            ALICE_UUID=$(kcadm.sh create users $COMMON_FLAGS -s username=alice -s firstName=Alice -s lastName=Adams  -s email=alice@mycorp.org -s enabled=true -o | jq -r .id)
            BOB_UUID=$(  kcadm.sh create users $COMMON_FLAGS -s username=bob   -s firstName=Bob   -s lastName=Bush   -s email=bob@mycorp.org   -s enabled=true -o | jq -r .id)
            JANE_UUID=$( kcadm.sh create users $COMMON_FLAGS -s username=jane  -s firstName=Jane  -s lastName=Carrat -s email=jane@mycorp.org  -s enabled=true -o | jq -r .id)
            MIKE_UUID=$( kcadm.sh create users $COMMON_FLAGS -s username=mike  -s firstName=Mike  -s lastName=Truk   -s email=mike@mycorp.org  -s enabled=true -o | jq -r .id)

            echo "Setting user passwords"
            kcadm.sh set-password $COMMON_FLAGS --username alice --new-password "$ALICE_PASSWORD"
            kcadm.sh set-password $COMMON_FLAGS --username bob   --new-password "$BOB_PASSWORD"
            kcadm.sh set-password $COMMON_FLAGS --username jane  --new-password "$JANE_PASSWORD"
            kcadm.sh set-password $COMMON_FLAGS --username mike  --new-password "$MIKE_PASSWORD"

            echo "Creating groups"
            TRINO_ADMIN_GROUP_UUID=$(    kcadm.sh create groups $COMMON_FLAGS -s name=trino-admin     -o | jq -r .id)
            TRINO_READWRITE_GROUP_UUID=$(kcadm.sh create groups $COMMON_FLAGS -s name=trino-readwrite -o | jq -r .id)
            TRINO_READONLY_GROUP_UUID=$( kcadm.sh create groups $COMMON_FLAGS -s name=trino-readonly  -o | jq -r .id)
            DRUID_ADMIN_GROUP_UUID=$(    kcadm.sh create groups $COMMON_FLAGS -s name=druid-admin     -o | jq -r .id)

            echo "Adding users to groups"
            kcadm.sh update $COMMON_FLAGS "users/$ALICE_UUID/groups/$TRINO_ADMIN_GROUP_UUID"
            kcadm.sh update $COMMON_FLAGS "users/$ALICE_UUID/groups/$DRUID_ADMIN_GROUP_UUID"
            kcadm.sh update $COMMON_FLAGS "users/$BOB_UUID/groups/$TRINO_READWRITE_GROUP_UUID"
            kcadm.sh update $COMMON_FLAGS "users/$JANE_UUID/groups/$TRINO_READONLY_GROUP_UUID"

            echo "Creating oauth2 clients"
            kcadm.sh create clients $COMMON_FLAGS -f - << EOF || true
            {
              "clientId": "trino",
              "enabled": true,
              "protocol": "openid-connect",
              "clientAuthenticatorType": "client-secret",
              "secret": "$TRINO_CLIENT_SECRET",
              "redirectUris": [
                "*"
              ],
              "webOrigins": [
                "*"
              ],
              "standardFlowEnabled": true
            }
            EOF
            kcadm.sh create clients $COMMON_FLAGS -f - << EOF || true
            {
              "clientId": "userinfo-fetcher",
              "enabled": true,
              "protocol": "openid-connect",
              "clientAuthenticatorType": "client-secret",
              "secret": "$USERINFO_FETCHER_CLIENT_SECRET",
              "redirectUris": [
                "*"
              ],
              "webOrigins": [
                "*"
              ],
              "publicClient": false,
              "standardFlowEnabled": false,
              "implicitFlowEnabled": false,
              "directAccessGrantsEnabled": false,
              "serviceAccountsEnabled": true,
              "attributes": {
                "oidc.ciba.grant.enabled": "true",
                "oauth2.device.authorization.grant.enabled": false
              }
            }
            EOF
            kcadm.sh add-roles --uusername service-account-userinfo-fetcher --rolename admin $COMMON_FLAGS

            kcadm.sh create clients $COMMON_FLAGS -f - << EOF || true
            {
              "clientId": "superset",
              "enabled": true,
              "protocol": "openid-connect",
              "clientAuthenticatorType": "client-secret",
              "secret": "$SUPERSET_CLIENT_SECRET",
              "redirectUris": [
                "*"
              ],
              "webOrigins": [
                "*"
              ],
              "standardFlowEnabled": true
            }
            EOF
            kcadm.sh create clients $COMMON_FLAGS -f - << EOF || true
            {
              "clientId": "druid",
              "enabled": true,
              "protocol": "openid-connect",
              "clientAuthenticatorType": "client-secret",
              "secret": "$DRUID_CLIENT_SECRET",
              "redirectUris": [
                "*"
              ],
              "webOrigins": [
                "*"
              ],
              "standardFlowEnabled": true
            }
            EOF
        volumeMounts:
          - name: tls
            mountPath: /tls
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsUser: 1000
      volumes:
        - name: tls
          ephemeral:
            volumeClaimTemplate:
              metadata:
                annotations:
                  secrets.stackable.tech/class: tls
                  secrets.stackable.tech/format: tls-pkcs12
                  secrets.stackable.tech/format.compatibility.tls-pkcs12.password: changeit
                  secrets.stackable.tech/scope: pod
              spec:
                storageClassName: secrets.stackable.tech
                accessModes:
                  - ReadWriteOnce
                resources:
                  requests:
                    storage: "1"
      restartPolicy: OnFailure
  backoffLimit: 20 # give some time for the Keycloak to be available
