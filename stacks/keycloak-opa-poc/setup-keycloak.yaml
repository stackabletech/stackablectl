# apiVersion: v1
# kind: Secret
# metadata:
#   name: keycloak-client-secrets
# stringData:
#   superset: "{{ keycloakSupersetClientSecret }}"
#   trino: "{{ keycloakTrinoClientSecret }}"
#   druid: "{{ keycloakDruidClientSecret }}"
#   # FIXME: They don't belong here
#   # druidCookiePassphrase: "{{ keycloakDruidCookiePassphrase }}"
#   # druidSystemUserPassword: "{{ druidSystemUserPassword }}"
# ---
# apiVersion: v1
# kind: Secret
# metadata:
#   name: keycloak-users
# stringData:
#   alice: "{{ alicePassword }}"
#   bob: "{{ bobPassword }}"
---
apiVersion: batch/v1
kind: Job
metadata:
  name: setup-keycloak
spec:
  template:
    spec:
      containers:
      - name: setup-keycloak
        image: docker.stackable.tech/stackable/testing-tools:0.2.0-stackable0.0.0-dev # We need 0.0.0-dev, so we get kubectl
        env:
          - name: KEYCLOAK_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                name: keycloak-admin-credentials
                key: admin
          - name: ALICE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: keycloak-users
                key: alice
          - name: BOB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: keycloak-users
                key: bob
          - name: SUPERSET_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: keycloak-client-secrets
                key: superset
          - name: TRINO_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: keycloak-client-secrets
                key: trino
          - name: DRUID_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: keycloak-client-secrets
                key: druid
        command:
          - bash
          - -x
          - -euo
          - pipefail
          - -c
          - |
            echo "Download keycloak"
            curl -LO https://github.com/keycloak/keycloak/releases/download/22.0.3/keycloak-22.0.3.zip
            unzip keycloak-22.0.3.zip
            cd keycloak-22.0.3/bin
            ./kcadm.sh config credentials --config kcadm.conf --server http://keycloak:8080/ --realm master --user admin --password "$KEYCLOAK_ADMIN_PASSWORD"
            ./kcadm.sh create users --config kcadm.conf -s username=alice -s firstName=Alice -s lastName=Adams -s email=alice@mycorp.org -s enabled=true || true
            ./kcadm.sh create users --config kcadm.conf -s username=bob   -s firstName=Bob   -s lastName=Bush  -s email=bob@mycorp.org   -s enabled=true || true
            ./kcadm.sh set-password --config kcadm.conf --username alice --new-password "$ALICE_PASSWORD"
            ./kcadm.sh set-password --config kcadm.conf --username bob   --new-password "$BOB_PASSWORD"
            ./kcadm.sh create clients --config kcadm.conf -f - << EOF || true
            {
              "clientId": "trino",
              "enabled": true,
              "protocol": "openid-connect",
              "clientAuthenticatorType": "client-secret",
              "secret": "$TRINO_CLIENT_SECRET",
              "redirectUris": [
                "*"
              ],
              "webOrigins": [
                "*"
              ],
              "standardFlowEnabled": true,
              "protocolMappers": [
                {
                  "name": "username",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-attribute-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "username",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "sub",
                    "jsonType.label": "String"
                  }
                }
              ]
            }
            EOF
            ./kcadm.sh create clients --config kcadm.conf -f - << EOF || true
            {
              "clientId": "superset",
              "enabled": true,
              "protocol": "openid-connect",
              "clientAuthenticatorType": "client-secret",
              "secret": "$SUPERSET_CLIENT_SECRET",
              "redirectUris": [
                "*"
              ],
              "webOrigins": [
                "*"
              ],
              "standardFlowEnabled": true,
              "protocolMappers": [
                {
                  "name": "username",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-attribute-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "username",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "sub",
                    "jsonType.label": "String"
                  }
                }
              ]
            }
            EOF
            ./kcadm.sh create clients --config kcadm.conf -f - << EOF || true
            {
              "clientId": "druid",
              "enabled": true,
              "protocol": "openid-connect",
              "clientAuthenticatorType": "client-secret",
              "secret": "$DRUID_CLIENT_SECRET",
              "redirectUris": [
                "*"
              ],
              "webOrigins": [
                "*"
              ],
              "standardFlowEnabled": true,
              "protocolMappers": [
                {
                  "name": "username",
                  "protocol": "openid-connect",
                  "protocolMapper": "oidc-usermodel-attribute-mapper",
                  "consentRequired": false,
                  "config": {
                    "userinfo.token.claim": "true",
                    "user.attribute": "username",
                    "id.token.claim": "true",
                    "access.token.claim": "true",
                    "claim.name": "sub",
                    "jsonType.label": "String"
                  }
                }
              ]
            }
            EOF
      restartPolicy: OnFailure
  backoffLimit: 20 # give some time for the Keycloak to be available
