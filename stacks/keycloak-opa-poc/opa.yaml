---
apiVersion: opa.stackable.tech/v1alpha1
kind: OpaCluster
metadata:
  name: opa
spec:
  image:
    productVersion: "0.51.0"
    stackableVersion: "23.7.0"
  clusterConfig:
    userInfo:
      backend:
        keycloak:
          hostname: keycloak.default.svc.cluster.local
          port: 8443
          clientCredentialsSecret: opa-userinfo-fetcher-client-credentials
          adminRealm: master
          userRealm: master
          tls:
            verification:
              server:
                caCert:
                  secretClass: tls
      cache:
        entryTimeToLive: 5s # For fast feedback during the demo
  servers:
    roleGroups:
      default: {}
---
apiVersion: v1
kind: Secret
metadata:
  name: opa-userinfo-fetcher-client-credentials
stringData:
  clientId: userinfo-fetcher
  clientSecret: "{{ keycloakUserinfoFetcherClientSecret }}"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: opa-bundle-trino
  labels:
    opa.stackable.tech/bundle: "true"
data:
  trino.rego: |
    package trino

    import data.bundles.opagroups.admins
    import future.keywords.in
    import future.keywords.if

    userInfo(userId) := http.send({"method": "POST", "url": "http://127.0.0.1:9476/user", "body": {"id": userId}, "headers": {"Content-Type": "application/json"}, "raise_error": true}).body

    default allow = false

    allow if input.context.identity.user == "admin"

    allow {
      currentUserInfo := userInfo(input.context.identity.user)

      some group
      currentUserInfo.groups[group].name = "/admin"
    }

    allow {
      input.action.operation == "ImpersonateUser"
      input.context.identity.principal.name == input.action.resource.user.name
    }

    allow {
      input.action.operation == "ImpersonateUser"
      input.context.identity.principal.name == "superset"
    }

    # allow {
    #   currentUserInfo := userInfo(input.context.identity.principal.name)
    #
    #   input.action.operation == "ImpersonateUser"
    #   input.action.resource.user.name == currentUserInfo().userName
    # }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: opa-bundle-druid
  labels:
    opa.stackable.tech/bundle: "true"
data:
  druid.rego: |
    package druid

    import data.bundles.opagroups.admins
    import future.keywords.in
    import future.keywords.if

    default allow = false

    allow if input.user == "druid_system"

    allow if input.user in admins
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: opagroups
  labels:
    opa.stackable.tech/bundle: "true"
data:
  data.json: |
    {
      "admins": [
        "admin",
        "alice"
      ]
    }
