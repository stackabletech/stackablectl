---
apiVersion: druid.stackable.tech/v1alpha1
kind: DruidCluster
metadata:
  name: simple-druid
spec:
  image:
    productVersion: 26.0.0
    stackableVersion: 23.7.0
  clusterConfig:
    listenerClass: external-unstable
    deepStorage:
      hdfs:
        configMapName: simple-hdfs
        directory: /data
    metadataStorageDatabase:
      dbType: derby
      connString: jdbc:derby://localhost:1527/var/druid/metadata.db;create=true
      host: localhost
      port: 1527
    tls: null
    zookeeperConfigMapName: simple-druid-znode
    authorization:
      opa:
        configMapName: simple-opa 
        package: druid
  brokers:
    roleGroups:
      default:
        replicas: 1
    podOverrides: &pod-overrides
      spec:
        containers:
          - name: druid
            env:
              - name: KEYCLOAK_DISCOVERY_URL
                valueFrom:
                  configMapKeyRef:
                    name: keycloak
                    key: KEYCLOAK_DISCOVERY_URL
              - name: DRUID_CLIENT_SECRET
                valueFrom:
                  secretKeyRef:
                    name: keycloak-client-secrets
                    key: druid
              - name: DRUID_COOKIE_PASSPHRASE
                valueFrom:
                  secretKeyRef:
                    name: keycloak-client-secrets
                    key: druidCookiePassphrase
    configOverrides:
      runtime.properties: &runtime-properties
        druid.extensions.loadList: "[\"druid-kafka-indexing-service\", \"druid-datasketches\", \"prometheus-emitter\", \"druid-basic-security\", \"druid-opa-authorizer\", \"druid-hdfs-storage\", \"druid-pac4j\"]"



        druid.auth.authenticator.MyBasicMetadataAuthenticator.type: basic
        
        # Default password for 'admin' user, should be changed for production.
        druid.auth.authenticator.MyBasicMetadataAuthenticator.initialAdminPassword: password1

        # Default password for internal 'druid_system' user, should be changed for production.
        druid.auth.authenticator.MyBasicMetadataAuthenticator.initialInternalClientPassword: password2

        # Uses the metadata store for storing users, you can use authentication API to create new users and grant permissions
        druid.auth.authenticator.MyBasicMetadataAuthenticator.credentialsValidator.type: metadata

        # If true and the request credential doesn't exists in this credentials store, the request will proceed to next Authenticator in the chain.
        druid.auth.authenticator.MyBasicMetadataAuthenticator.skipOnFailure: "true"
        druid.auth.authenticator.MyBasicMetadataAuthenticator.authorizerName: OpaAuthorizer


        # pac4j authenticator
        druid.auth.authenticator.pac4j.type: pac4j
        druid.auth.authenticator.pac4j.authorizerName: OpaAuthorizer
        # pa4j common config
        druid.auth.pac4j.cookiePassphrase: '${env:DRUID_COOKIE_PASSPHRASE}'
        # OIDC common config
        druid.auth.pac4j.oidc.clientID: druid
        druid.auth.pac4j.oidc.clientSecret: '{"type":"environment","variable":"DRUID_CLIENT_SECRET"}'
        druid.auth.pac4j.oidc.discoveryURI: '${env:KEYCLOAK_DISCOVERY_URL}'
        

        druid.auth.authenticatorChain: '["MyBasicMetadataAuthenticator","pac4j"]'

        druid.escalator.type: basic
        druid.escalator.internalClientUsername: druid_system
        druid.escalator.internalClientPassword: password2
        druid.escalator.authorizerName: OpaAuthorizer
  coordinators:
    roleGroups:
      default:
        replicas: 1
    podOverrides: *pod-overrides
    configOverrides:
      runtime.properties: *runtime-properties
  historicals:
    roleGroups:
      default:
        replicas: 1
    podOverrides: *pod-overrides
    configOverrides:
      runtime.properties: *runtime-properties
  middleManagers:
    roleGroups:
      default:
        replicas: 1
    podOverrides: *pod-overrides
    configOverrides:
      runtime.properties: *runtime-properties
  routers:
    roleGroups:
      default:
        replicas: 1
    podOverrides: *pod-overrides
    configOverrides:
      runtime.properties: *runtime-properties
