stacks:
  monitoring:
    description: Stack containing Prometheus and Grafana
    stackableRelease: 23.11
    stackableOperators:
     - commons
    labels:
      - monitoring
      - prometheus
      - grafana
    manifests:
      - plainYaml: https://raw.githubusercontent.com/stackabletech/stackablectl/main/stacks/monitoring/grafana-dashboards.yaml
      - helmChart: https://raw.githubusercontent.com/stackabletech/stackablectl/main/stacks/_templates/prometheus.yaml
      - plainYaml: https://raw.githubusercontent.com/stackabletech/stackablectl/main/stacks/_templates/prometheus-service-monitor.yaml
    supportedNamespaces: []
    resourceRequests:
      cpu: 1750m
      memory: 1714Mi
      pvc: 110Gi
    parameters:
      - name: grafanaAdminPassword
        description: Password of the Grafana admin user
        default: adminadmin
  logging:
    description: Stack containing OpenSearch, OpenSearch Dashboards (Kibana) and Vector aggregator
    stackableRelease: 23.11
    stackableOperators:
      - commons
      - secret
      - zookeeper # demo does install a zookeeper to produce logs
    labels:
      - logging
      - opensearch
      - opensearch-dashboards
      - vector
    manifests:
      - helmChart: https://raw.githubusercontent.com/stackabletech/stackablectl/main/stacks/_templates/opensearch.yaml
      - helmChart: https://raw.githubusercontent.com/stackabletech/stackablectl/main/stacks/_templates/opensearch-dashboards.yaml
      - helmChart: https://raw.githubusercontent.com/stackabletech/stackablectl/main/stacks/_templates/vector-aggregator.yaml
      - plainYaml: https://raw.githubusercontent.com/stackabletech/stackablectl/main/stacks/_templates/vector-aggregator-discovery.yaml
    supportedNamespaces: []
    resourceRequests:
      cpu: 5150m
      memory: 3147Mi
      pvc: 24Gi
    parameters:
      - name: openSearchAdminPassword
        description: Password of the OpenSearch admin user
        default: adminadmin
      - name: openSearchDashboardPassword
        description: Password of OpenSearch Dashboard user
        default: kibanaserverkibanaserver
      - name: setSysctlMaxMapCount
        description: Wether an init-container should be used to increase 'sysctl -w vm.max_map_count'. This requires to spawn an init-container with runsAsUser 0 privileges, which some clusters prohibit. You can increase 'vm.max_map_count' on all of the kubernetes nodes manually and set this to 'false'.
        default: "true"
  airflow:
    description: Stack containing Airflow scheduling platform
    stackableRelease: 23.11
    stackableOperators:
      - commons
      - secret
      - airflow
      - spark-k8s # Some demo does schedule a Spark job
    labels:
      - airflow
    manifests:
      - helmChart: https://raw.githubusercontent.com/stackabletech/stackablectl/main/stacks/_templates/postgresql-airflow.yaml
      - helmChart: https://raw.githubusercontent.com/stackabletech/stackablectl/main/stacks/_templates/redis-airflow.yaml
      - plainYaml: stacks/airflow/airflow.yaml
    supportedNamespaces: []
    resourceRequests:
      cpu: 3400m
      memory: 9010Mi
      pvc: 24Gi
    parameters:
      - name: airflowAdminPassword
        description: Password of the Airflow admin user
        default: adminadmin
      - name: airflowSecretKey
        description: Airflow's secret key used to generate e.g. user session tokens
        default: airflowSecretKey
  data-lakehouse-iceberg-trino-spark:
    description: Data lakehouse using Iceberg lakehouse on S3, Trino as query engine, Spark for streaming ingest and Superset for data visualization
    stackableRelease: 23.11 # TODO (sbernauer): When upgrading to 23.11, please
    # 1. Use truststore from secret-op here https://github.com/stackabletech/stackablectl/blob/eda45945cfcf5c6581cf1b88c782d98fada8065f/demos/data-lakehouse-iceberg-trino-spark/create-spark-ingestion-job.yaml#L128
    # 2. Use spark.jars dependency resolution instead of having custom Spark image. See https://github.com/stackabletech/spark-k8s-operator/pull/281
    stackableOperators:
      - commons
      - secret
      - hive
      - trino
      - opa
      - zookeeper
      - kafka
      - nifi
      - superset
      - spark-k8s
    labels:
      - iceberg
      - trino
      - spark
      - superset
      - kafka
      - nifi
      - minio
      - s3
    manifests:
      - helmChart: https://raw.githubusercontent.com/stackabletech/stackablectl/main/stacks/_templates/minio-distributed.yaml
      - helmChart: https://raw.githubusercontent.com/stackabletech/stackablectl/main/stacks/_templates/postgresql-hive.yaml
      - helmChart: https://raw.githubusercontent.com/stackabletech/stackablectl/main/stacks/_templates/postgresql-hive-iceberg.yaml
      - helmChart: https://raw.githubusercontent.com/stackabletech/stackablectl/main/stacks/_templates/postgresql-superset.yaml
      - plainYaml: https://raw.githubusercontent.com/stackabletech/stackablectl/main/stacks/data-lakehouse-iceberg-trino-spark/s3-connection.yaml
      - plainYaml: stacks/data-lakehouse-iceberg-trino-spark/hive-metastores.yaml
      - plainYaml: stacks/data-lakehouse-iceberg-trino-spark/trino.yaml
      - plainYaml: stacks/data-lakehouse-iceberg-trino-spark/zookeeper.yaml
      - plainYaml: stacks/data-lakehouse-iceberg-trino-spark/kafka.yaml
      - plainYaml: stacks/data-lakehouse-iceberg-trino-spark/nifi.yaml
      - plainYaml: stacks/nifi-kafka-druid-superset-s3/superset.yaml # Reuse
    supportedNamespaces: []
    resourceRequests:
      cpu: "71"
      memory: 160Gi
      pvc: 1Ti
    parameters:
      - name: trinoAdminPassword
        description: Password of the Trino admin user
        default: adminadmin
      - name: supersetAdminPassword
        description: Password of the Superset admin user
        default: adminadmin
      - name: nifiAdminPassword
        description: Password of the MinIO admin user
        default: adminadmin
      - name: minioAdminPassword
        description: Password of the MinIO admin user
        default: adminadmin
      - name: supersetSecretKey
        description: Superset's secret key used to generate e.g. user session tokens
        default: supersetSecretKey
  hdfs-hbase:
    description: HBase cluster using HDFS as underlying storage
    stackableRelease: 23.11
    stackableOperators:
      - commons
      - secret
      - zookeeper
      - hdfs
      - hbase
    labels:
      - hbase
      - hdfs
    manifests:
      - plainYaml: stacks/hdfs-hbase/zookeeper.yaml
      - plainYaml: stacks/hdfs-hbase/hdfs.yaml
      - plainYaml: stacks/hdfs-hbase/hbase.yaml
    supportedNamespaces: []
    resourceRequests:
      cpu: 4200m
      memory: 10758Mi
      pvc: 21Gi
    parameters: []
  nifi-kafka-druid-superset-s3:
    description: Stack containing NiFi, Kafka, Druid, MinIO and Superset for data visualization
    stackableRelease: 23.11
    stackableOperators:
      - commons
      - secret
      - zookeeper
      - kafka
      - druid
      - superset
      - nifi
    labels:
      - nifi
      - kafka
      - druid
      - superset
      - minio
      - s3
    manifests:
      - helmChart: stacks/_templates/minio.yaml
      - helmChart: stacks/_templates/postgresql-druid.yaml
      - helmChart: stacks/_templates/postgresql-superset.yaml
      - plainYaml: stacks/nifi-kafka-druid-superset-s3/zookeeper.yaml
      - plainYaml: stacks/nifi-kafka-druid-superset-s3/kafka.yaml
      - plainYaml: stacks/nifi-kafka-druid-superset-s3/druid.yaml
      - plainYaml: stacks/nifi-kafka-druid-superset-s3/superset.yaml
      - plainYaml: stacks/nifi-kafka-druid-superset-s3/nifi.yaml
    supportedNamespaces: []
    resourceRequests:
      cpu: 8900m
      memory: 28042Mi
      pvc: 75Gi
    parameters:
      - name: nifiAdminPassword
        description: Password of the NiFI admin user
        default: adminadmin
      - name: supersetAdminPassword
        description: Password of the Superset admin user
        default: adminadmin
      - name: minioAdminPassword
        description: Password of the MinIO admin user
        default: adminadmin
      - name: supersetSecretKey
        description: Superset's secret key used to generate e.g. user session tokens
        default: adminadmin
  spark-trino-superset-s3:
    description: Stack containing MinIO, Trino and Superset for data visualization
    stackableRelease: 23.11
    stackableOperators:
      - commons
      - secret
      - hive
      - trino
      - opa
      - superset
      - spark-k8s # Some demo does schedule a Spark job
    labels:
      - trino
      - superset
      - minio
      - s3
    manifests:
      - helmChart: stacks/_templates/minio.yaml
      - helmChart: stacks/_templates/postgresql-hive.yaml
      - helmChart: stacks/_templates/postgresql-hive-iceberg.yaml
      - helmChart: stacks/_templates/postgresql-superset.yaml
      - plainYaml: stacks/trino-superset-s3/s3-connection.yaml
      - plainYaml: stacks/spark-trino-superset-s3/hive-metastore.yaml
      - plainYaml: stacks/trino-superset-s3/trino.yaml
      - plainYaml: stacks/spark-trino-superset-s3/trino-prediction-catalog.yaml
      - plainYaml: stacks/trino-superset-s3/superset.yaml
    supportedNamespaces: []
    resourceRequests:
      cpu: 7100m
      memory: 15910Mi
      pvc: 36Gi
    parameters:
      - name: trinoAdminPassword
        description: Password of the Trino admin user
        default: adminadmin
      - name: supersetAdminPassword
        description: Password of the Superset admin user
        default: adminadmin
      - name: minioAdminPassword
        description: Password of the MinIO admin user
        default: adminadmin
      - name: supersetSecretKey
        description: Superset's secret key used to generate e.g. user session tokens
        default: supersetSecretKey
  trino-superset-s3:
    description: Stack containing MinIO, Trino and Superset for data visualization
    stackableRelease: 23.11
    stackableOperators:
      - commons
      - secret
      - hive
      - trino
      - opa
      - superset
    labels:
      - trino
      - superset
      - minio
      - s3
    manifests:
      - helmChart: stacks/_templates/minio.yaml
      - helmChart: stacks/_templates/postgresql-hive.yaml
      - helmChart: stacks/_templates/postgresql-superset.yaml
      - plainYaml: stacks/trino-superset-s3/s3-connection.yaml
      - plainYaml: stacks/trino-superset-s3/hive-metastore.yaml
      - plainYaml: stacks/trino-superset-s3/trino.yaml
      - plainYaml: stacks/trino-superset-s3/superset.yaml
    supportedNamespaces: []
    resourceRequests:
      cpu: 6800m
      memory: 15822Mi
      pvc: 28Gi
    parameters:
      - name: trinoAdminPassword
        description: Password of the Trino admin user
        default: adminadmin
      - name: supersetAdminPassword
        description: Password of the Superset admin user
        default: adminadmin
      - name: minioAdminPassword
        description: Password of the MinIO admin user
        default: adminadmin
      - name: supersetSecretKey
        description: Superset's secret key used to generate e.g. user session tokens
        default: supersetSecretKey
  trino-iceberg:
    description: Stack containing Trino using Apache Iceberg as a S3 data lakehouse
    stackableRelease: 23.11
    stackableOperators:
      - commons
      - secret
      - hive
      - trino
      - opa
    labels:
      - trino
      - opa
      - iceberg
      - minio
      - s3
    manifests:
      - helmChart: stacks/_templates/minio-distributed-small.yaml
      - helmChart: stacks/_templates/postgresql-hive-iceberg.yaml
      - plainYaml: stacks/trino-iceberg/s3-connection.yaml
      - plainYaml: stacks/trino-iceberg/hive-metastores.yaml
      - plainYaml: stacks/trino-iceberg/trino.yaml
    supportedNamespaces: []
    resourceRequests:
      cpu: 8550m
      memory: 26662Mi
      pvc: 110Gi
    parameters:
      - name: trinoAdminPassword
        description: Password of the Trino admin user
        default: adminadmin
      - name: minioAdminPassword
        description: Password of the MinIO admin user
        default: adminadmin
  jupyterhub-pyspark-hdfs:
    description: Jupyterhub with PySpark and HDFS integration
    stackableRelease: 23.11
    stackableOperators:
      - commons
      - secret
      - zookeeper
      - hdfs
      - spark-k8s
    labels:
      - jupyterhub
      - hdfs
      - pyspark
    manifests:
      - helmChart: https://raw.githubusercontent.com/stackabletech/stackablectl/main/stacks/_templates/jupyterhub.yaml
      - plainYaml: stacks/jupyterhub-pyspark-hdfs/zookeeper.yaml
      - plainYaml: stacks/jupyterhub-pyspark-hdfs/hdfs.yaml
      - plainYaml: https://raw.githubusercontent.com/stackabletech/stackablectl/main/stacks/jupyterhub-pyspark-hdfs/serviceaccount.yaml
      # TODO Use patched JHub that created service for us from customer setup (ask Sebastian)
      - plainYaml: https://raw.githubusercontent.com/stackabletech/stackablectl/main/stacks/jupyterhub-pyspark-hdfs/spark_driver_service.yaml
    supportedNamespaces: []
    resourceRequests:
      cpu: 3350m
      memory: 7174Mi
      pvc: 110Gi
    parameters:
      - name: jupyterHubAdminPassword
        description: Password of the JupyterHub admin user
        default: adminadmin
  dual-hive-hdfs-s3:
    description: Dual stack Hive on HDFS and S3 for Hadoop/Hive to Trino migration
    stackableRelease: 23.11
    stackableOperators:
      - commons
      - secret
      - zookeeper
      - hdfs
      - hive
      - trino
      - opa
    labels:
      - trino
      - hive
      - hdfs
      - s3
    manifests:
      - helmChart: https://raw.githubusercontent.com/stackabletech/stackablectl/main/stacks/_templates/postgresql-hivehdfs.yaml
      - helmChart: https://raw.githubusercontent.com/stackabletech/stackablectl/main/stacks/_templates/postgresql-hives3.yaml
      - helmChart: https://raw.githubusercontent.com/stackabletech/stackablectl/main/stacks/_templates/minio.yaml
      - plainYaml: https://raw.githubusercontent.com/stackabletech/stackablectl/main/stacks/dual-hive-hdfs-s3/hdfs.yaml
      - plainYaml: https://raw.githubusercontent.com/stackabletech/stackablectl/main/stacks/dual-hive-hdfs-s3/hive.yaml
      - plainYaml: https://raw.githubusercontent.com/stackabletech/stackablectl/main/stacks/dual-hive-hdfs-s3/trino.yaml
    supportedNamespaces: []
    resourceRequests:
      cpu: 7750m
      memory: 19974Mi
      pvc: 44Gi
    parameters:
      - name: minioAdminPassword
        description: Password of the Minio admin user
        default: adminadmin
  tutorial-openldap:
    description: >-
      An OpenLDAP instance with two users (alice:alice, bob:bob) and TLS enabled.
      The bind user credentials are: ldapadmin:ldapadminpassword.
      No AuthenticationClass is configured, The AuthenticationClass is created manually in the tutorial.
      Use the 'openldap' Stack for an OpenLDAD with an AuthenticationClass already installed.
    stackableRelease: 23.11
    stackableOperators:
      - commons
      - secret
    labels:
      - authentication
      - ldap
    manifests:
      - plainYaml: https://raw.githubusercontent.com/stackabletech/stackablectl/main/stacks/authentication/openldap-tls.yaml
    supportedNamespaces: ["default"]
    resourceRequests:
      cpu: 1950m
      memory: 2182Mi
      pvc: 0Gi
    # TODO: Parameterize
    parameters: []
  openldap:
    description: >-
      An OpenLDAP instance with two users (alice:alice, bob:bob) and TLS enabled.
      The bind user credentials are: ldapadmin:ldapadminpassword.
      The LDAP AuthenticationClass is called 'ldap' and the SecretClass for the bind credentials is called 'ldap-bind-credentials'.
      The stack already creates an appropriate Secret, so referring to the 'ldap' AuthenticationClass in your ProductCluster should be enough.
    stackableRelease: 23.11
    stackableOperators:
      - commons
      - secret
    labels:
      - authentication
      - ldap
    manifests:
      - plainYaml: https://raw.githubusercontent.com/stackabletech/stackablectl/main/stacks/authentication/openldap-tls.yaml
      - plainYaml: https://raw.githubusercontent.com/stackabletech/stackablectl/main/stacks/authentication/openldap-tls-authenticationclass.yaml
    supportedNamespaces: []
    resourceRequests:
      cpu: 1950m
      memory: 2182Mi
      pvc: 0Gi
    # TODO: Parameterize
    parameters: []
  keycloak-opa-poc:
    description: >-
      A Superset, Trino, Druid, Keycloak and OPA instance.
      Superset, Trino and Druid have single sign-on with Keycloak enabled.
      Trino and Druid have OPA authorization enabled.
      3 users are created in Keycloak: admin:adminadmin, alice:alicealice, bob:bobbob. admin and alice are admins with
      full authorization in Druid and Trino, bob is not authorized.
      This is a proof-of-concept and the mechanisms used here are subject to change.
    stackableRelease: 23.11
    stackableOperators:
      - commons
      - secret
      - trino
      - superset
      - zookeeper
      - druid
      - hdfs
      - opa
    labels:
      - authentication
      - sso
    manifests:
      - helmChart: https://raw.githubusercontent.com/stackabletech/stackablectl/main/stacks/_templates/postgresql-superset.yaml
      - helmChart: https://raw.githubusercontent.com/stackabletech/stackablectl/main/stacks/_templates/postgresql-druid.yaml
      - plainYaml: stacks/keycloak-opa-poc/serviceaccount.yaml
      - plainYaml: stacks/keycloak-opa-poc/keycloak.yaml
      - plainYaml: stacks/keycloak-opa-poc/setup-keycloak.yaml
      - plainYaml: stacks/keycloak-opa-poc/opa.yaml
      - plainYaml: stacks/keycloak-opa-poc/policies.yaml
      - plainYaml: stacks/keycloak-opa-poc/zookeeper.yaml
      - plainYaml: stacks/keycloak-opa-poc/hdfs.yaml
      - plainYaml: stacks/keycloak-opa-poc/druid.yaml
      - plainYaml: stacks/keycloak-opa-poc/trino.yaml
      - plainYaml: stacks/keycloak-opa-poc/superset.yaml
    supportedNamespaces: ["default"] # ClusterRoleBinding needs explicit namespace
    resourceRequests:
      cpu: 7850m
      memory: 23142Mi
      pvc: 34Gi
    parameters:
      - name: alicePassword
        description: Password of the user alice, which can log into Trino and Superset
        default: alicealice
      - name: bobPassword
        description: Password of the user bob, which can log into Trino and Superset
        default: bobbob
      - name: keycloakAdminPassword
        description: Password of the Keycloak admin user
        default: adminadmin
      - name: keycloakSupersetClientSecret
        description: Secret ID of the Keycloak Superset client that is used by Superset to connect to Keycloak to authenticate users
        default: supersetsuperset
      - name: keycloakTrinoClientSecret
        description: Secret ID of the Keycloak Trino client that is used by Trino to connect to Keycloak to authenticate users
        default: trinotrino
      - name: keycloakDruidClientSecret
        description: Secret ID of the Keycloak Druid client that is used by Druid to connect to Keycloak to authenticate users
        default: druiddruid
      - name: keycloakDruidCookiePassphrase
        description: Passphrase for encrypting the cookies used to manage authentication session with browser.
        default: druiddruidcookiepassphrase
      - name: druidSystemUserPassword
        description: Password for the Druid user druid_system
        default: druidsystemuserpassword
      - name: supersetSecretKey
        description: Superset's secret key used to generate e.g. user session tokens
        default: supersetSecretKey
  signal-processing:
    description: >-
      A stack used for creating, streaming and processing in-flight data and persisting it to TimescaleDB before it is displayed in Grafana
    stackableRelease: 23.11
    stackableOperators:
      - commons
      - secret
      - zookeeper
      - nifi
    labels:
      - timescaledb
      - nifi
      - jupyterhub
      - grafana
    manifests:
      - plainYaml: https://raw.githubusercontent.com/stackabletech/stackablectl/main/stacks/signal-processing/secrets.yaml
      - plainYaml: https://raw.githubusercontent.com/stackabletech/stackablectl/main/stacks/signal-processing/grafana-dashboards.yaml
      - helmChart: https://raw.githubusercontent.com/stackabletech/stackablectl/main/stacks/signal-processing/grafana.yaml
      - helmChart: https://raw.githubusercontent.com/stackabletech/stackablectl/main/stacks/_templates/postgresql-timescaledb.yaml
      - plainYaml: https://raw.githubusercontent.com/stackabletech/stackablectl/main/stacks/nifi-kafka-druid-superset-s3/zookeeper.yaml
      - plainYaml: https://raw.githubusercontent.com/stackabletech/stackablectl/main/stacks/signal-processing/nifi.yaml
      - plainYaml: https://raw.githubusercontent.com/stackabletech/stackablectl/main/stacks/jupyterhub-pyspark-hdfs/serviceaccount.yaml
      - plainYaml: https://raw.githubusercontent.com/stackabletech/stackablectl/main/stacks/jupyterhub-pyspark-hdfs/spark_driver_service.yaml
      - helmChart: https://raw.githubusercontent.com/stackabletech/stackablectl/main/stacks/signal-processing/jupyterhub.yaml
    parameters:
      - name: nifiAdminPassword
        description: Password of the NiFI admin user
        default: adminadmin
      - name: grafanaAdminPassword
        description: Password of the Grafana admin user
        default: adminadmin
      - name: postgresAdminPassword
        description: Password for the postgres/timescaleDB admin user
        default: adminadmin
      - name: jupyterHubAdminPassword
        description: Password of the JupyterHub admin user
        default: adminadmin
